@model PaymentModule.Business.Dtos.OutputDtos.UserCartOutputDto
@using PaymentModule.Data.Entities // Thêm using này để cast ViewBag
@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="checkout-page">
    <div class="checkout-container">
        <div class="checkout-left">
            <h2 class="checkout-title">Checkout</h2>

            <div class="checkout-section">
                <h3>Pay with</h3>
                <div class="payment-options">
                    <label class="payment-option">
                        <input type="radio" name="payment" value="PayPal" />
                        <img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/PayPal.svg" alt="PayPal" class="payment-logo" />
                        <span>PayPal</span>
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="payment" value="COD" checked />
                        <img src="https://cdn-icons-png.flaticon.com/512/1041/1041873.png" alt="COD" class="payment-logo" />
                        <span>Thanh toán khi nhận hàng (COD)</span>
                    </label>
                </div>
            </div>

            <div class="checkout-section">
                <h3>Ship to</h3>
                @if (ViewBag.AddressList != null && ViewBag.AddressList.Count > 0)
                {
                    <select id="addressSelect" class="form-control" style="width: 100%; padding: 8px; border-radius: 5px; font-size: 16px;">
                        @foreach (var addr in (List<Address>)ViewBag.AddressList)
                        {
                            <option value="@addr.Id"
                                    data-full-name="@addr.FullName"
                                    data-street="@addr.Street"
                                    data-city="@addr.City"
                                    data-state="@addr.State"
                                    data-country="@addr.Country"
                                    data-phone="@addr.Phone">
                                @addr.FullName - @addr.Street, @addr.City
                            </option>
                        }
                    </select>
                }
                else
                {
                    <p class="no-address">⚠️ Bạn chưa có địa chỉ giao hàng</p>
                }
                <button type="button" class="btn-add-address" id="btnAddAddress" style="margin-top: 10px;">+ Add new address</button>
            </div>

            <div class="checkout-section">
                <h3>Mã giảm giá</h3>
                <select id="couponSelect" class="coupon-select" style="padding: 8px; border-radius: 5px;">
                    <option value="">-- Chọn mã giảm giá --</option>
                    <option value="10">Giảm 10% (fake)</option>
                    <option value="20">Giảm 20% (fake)</option>
                </select>
                <button class="btn-apply-coupon" id="btnApplyCoupon">Áp dụng</button>
                <p id="couponMsg" class="coupon-msg"></p>
            </div>

            <div class="checkout-section">
                <h3>Review items</h3>
                @foreach (var item in Model.Items)
                {
                    <div class="checkout-item">
                        <img src="@item.Images" alt="@item.Title" class="checkout-item-img" />
                        <div class="checkout-item-info">
                            <p class="checkout-item-title">@item.Title</p>
                            <p>Qty: @item.Quantity × @item.Price.ToString("N0") ₫</p>
                            <p><strong>@item.TotalPrice.ToString("N0") ₫</strong></p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="checkout-right">
            <div class="order-summary">
                <h4>Order Summary</h4>
                <p>Items: <strong>@Model.Items.Count</strong></p>
                <p>Tiền hàng: <span id="subtotal" data-value="@Model.TotalPrice">@Model.TotalPrice.ToString("N0")</span> ₫</p>
                <p>Phí vận chuyển: <span id="shippingCost" data-value="0">Đang tính...</span></p>
                <p>Giảm giá: <span id="discountAmount" data-value="0">0 ₫</span></p>
                <hr />
                <p><strong>Tổng tiền: <span id="orderTotal" data-value="@Model.TotalPrice">@Model.TotalPrice.ToString("N0")</span> ₫</strong></p>
                <button type="button" class="btn-confirm-pay" id="btnConfirmPay" disabled>Confirm and pay</button>
            </div>
        </div>
    </div>
</section>

<div id="addressModal" class="modal-overlay">
    <div class="modal-box">
        <h3>Add new address</h3>
        <form id="addressForm">
            <label>Full Name</label><input type="text" name="fullName" required />
            <label>Street Address</label><input type="text" name="street" required />
            <label>City</label><input type="text" name="city" required />
            <label>State</label><input type="text" name="state" required />
            <label>Country</label><input type="text" name="country" required />
            <label>Phone</label><input type="text" name="phone" required />
            <div class="modal-actions">
                <button type="button" class="btn-cancel" id="closeModal">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
    // === KHAI BÁO BIẾN ===
    const modal = document.getElementById("addressModal");
    const btnAdd = document.getElementById("btnAddAddress");
    const closeBtn = document.getElementById("closeModal");
    const form = document.getElementById("addressForm");
    const confirmBtn = document.getElementById("btnConfirmPay");
    const addressSelect = document.getElementById("addressSelect"); // Biến chính

    const subtotalEl = document.getElementById("subtotal");
    const shippingEl = document.getElementById("shippingCost");
    const discountEl = document.getElementById("discountAmount");
    const totalEl = document.getElementById("orderTotal");

    // Kiểm tra xem có địa chỉ nào không
    let hasAddress = addressSelect != null && addressSelect.options.length > 0;
    if (hasAddress) {
        confirmBtn.disabled = false;
    } else {
        confirmBtn.disabled = true;
    }

    // === HÀM HELPER ===
    function formatCurrency(num) {
        return parseFloat(num).toLocaleString('vi-VN', { style: 'currency', currency: 'VND', minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    // Hàm cập nhật tổng tiền
    function updateSummary() {
        const subtotal = parseFloat(subtotalEl.dataset.value) || 0;
        const shipping = parseFloat(shippingEl.dataset.value) || 0;
        const discount = parseFloat(discountEl.dataset.value) || 0;
        const total = subtotal + shipping - discount;

        shippingEl.textContent = formatCurrency(shipping);
        discountEl.textContent = formatCurrency(discount);
        totalEl.textContent = formatCurrency(total);
        confirmBtn.textContent = `Confirm and pay ${formatCurrency(total)}`;
    }

    // Hàm gọi API tính phí (DÙNG addressId)
    async function fetchShippingFee(addressId) {
        shippingEl.textContent = "Đang tính...";
        try {
            const response = await fetch(`/cart/api/calculate-shipping?addressId=${addressId}`);
            if (!response.ok) throw new Error("Failed to fetch shipping fee");

            const data = await response.json();
            shippingEl.dataset.value = data.fee;
        } catch (error) {
            console.error("Lỗi tính phí ship:", error);
            shippingEl.dataset.value = 50000; // Phí mặc định nếu lỗi API
        }
        updateSummary();
    }

    // === EVENT LISTENERS ===

    // 1. Lắng nghe sự kiện thay đổi địa chỉ
    addressSelect?.addEventListener('change', () => {
        const selectedAddressId = addressSelect.value;
        fetchShippingFee(selectedAddressId);
    });

    // 2. Logic Áp dụng Coupon
    const couponSelect = document.getElementById("couponSelect");
    const applyBtn = document.getElementById("btnApplyCoupon");
    const msg = document.getElementById("couponMsg");
    let couponUsed = false;

    applyBtn.addEventListener("click", () => {
        if (couponUsed) {
            msg.textContent = "❌ Bạn đã áp dụng mã rồi!";
            msg.style.color = "red";
            return;
        }
        const coupon = couponSelect.value;
        const subtotal = parseFloat(subtotalEl.dataset.value);
        let discount = 0;
        if (coupon === "10") {
            discount = subtotal * 0.1;
            msg.textContent = "✔️ Đã áp dụng mã giảm 10%";
        } else if (coupon === "20") {
            discount = subtotal * 0.2;
            msg.textContent = "✔️ Đã áp dụng mã giảm 20%";
        } else {
            msg.textContent = "❌ Vui lòng chọn mã hợp lệ";
            msg.style.color = "red";
            return;
        }

        couponUsed = true;
        discountEl.dataset.value = discount; // Cập nhật data-value
        couponSelect.disabled = true;
        applyBtn.disabled = true;
        msg.style.color = "#0654ba";
        
        updateSummary(); // Gọi hàm update tổng tiền
    });

    // 3. Logic Confirm Pay (Đã sửa)
    confirmBtn.addEventListener("click", () => {
        if (!hasAddress || !addressSelect) {
            alert("⚠️ Bạn cần chọn địa chỉ giao hàng!");
            return;
        }

        // Lấy dữ liệu từ các element
        const subtotal = parseFloat(subtotalEl.dataset.value);
        const shipping = parseFloat(shippingEl.dataset.value);
        const discount = parseFloat(discountEl.dataset.value);
        const total = subtotal + shipping - discount;
        const coupon = couponSelect.value;
        
        // Lấy thông tin từ <select>
        const selectedOption = addressSelect.options[addressSelect.selectedIndex];
        const addressId = parseInt(selectedOption.value);
        
        // Lấy thông tin chi tiết từ data-* attributes
        const addressDetails = {
            fullName: selectedOption.dataset.fullName,
            street: selectedOption.dataset.street,
            cityLine: `${selectedOption.dataset.city}, ${selectedOption.dataset.state}`,
            country: selectedOption.dataset.country,
            phone: selectedOption.dataset.phone
        };

        const paymentMethod = document.querySelector('input[name="payment"]:checked').value; // Lấy từ 'value'

        // Gửi JSON về server
        fetch("/order/ConfirmFromCheckout", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                subtotal,
                shipping,
                discount,
                total,
                coupon,
                paymentMethod,
                addressId: addressId, // Gửi ID
                address: addressDetails // Gửi chi tiết để trang sau hiển thị
            })
        }).then(response => {
            if (response.ok) {
                window.location.href = "/order/confirm";
            } else {
                alert("Có lỗi xảy ra, không thể xác nhận đơn hàng.");
            }
        });
    });

    // 4. Logic Popup (Giữ nguyên)
    btnAdd?.addEventListener("click", () => modal.classList.add("show"));
    closeBtn?.addEventListener("click", () => modal.classList.remove("show"));
    window.addEventListener("click", e => { if (e.target === modal) modal.classList.remove("show"); });
    
    // (Logic 'form.addEventListener("submit", ...)' đã bị xóa
    // vì nó bị lỗi và tham chiếu đến các element không còn tồn tại.
    // Bạn cần implement logic POST địa chỉ mới về server
    // và reload trang ở đây.)

    // === KHỞI CHẠY LẦN ĐẦU ===
    if (hasAddress) {
        // Lấy ID của địa chỉ đang được chọn
        const initialAddressId = addressSelect.value;
        fetchShippingFee(initialAddressId);
    } else {
        // Không có địa chỉ, không có gì để tính
        shippingEl.textContent = formatCurrency(0);
        updateSummary();
    }
});
</script>


<style>
    /* CSS CỦA BẠN (GIỮ NGUYÊN) */
    .checkout-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin: 40px auto;
        max-width: 1000px;
    }

    .checkout-left {
        flex: 2;
    }

    .checkout-right {
        flex: 1;
        background: #fafafa;
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #ddd;
    }

    .checkout-section {
        margin-bottom: 20px;
    }

    .checkout-item {
        display: flex;
        gap: 15px;
        border-bottom: 1px solid #eee;
        padding: 10px 0;
    }

    .checkout-item-img {
        width: 70px;
        height: 70px;
        border-radius: 10px;
        object-fit: cover;
    }

    .payment-logo {
        width: 30px;
        height: 30px;
        margin-right: 8px;
    }
    
    /* (Thêm) Căn chỉnh label thanh toán */
    .payment-option {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 8px;
        cursor: pointer;
    }
    .payment-option input {
        margin-right: 10px;
    }

    .btn-apply-coupon, .btn-confirm-pay {
        background: #0064d2;
        color: #fff;
        border: none;
        padding: 10px 18px;
        border-radius: 30px;
        cursor: pointer;
        font-weight: 600;
    }

        .btn-apply-coupon:hover, .btn-confirm-pay:hover {
            background: #0654ba;
        }

    .no-address {
        color: #c00;
        font-weight: 500;
    }

    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Thêm z-index */
    }

        .modal-overlay.show {
            display: flex;
        }

    .modal-box {
        background: white;
        padding: 20px;
        border-radius: 10px;
        width: 400px;
    }

    /* (Thêm) CSS cho form trong Modal */
    .modal-box label {
        display: block;
        margin-top: 10px;
        font-weight: 600;
    }
    .modal-box input[type="text"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box; /* Thêm */
    }
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    .btn-cancel, .btn-save {
        padding: 8px 16px;
        border-radius: 20px;
        border: none;
        cursor: pointer;
    }
    .btn-cancel {
        background: #eee;
    }
    .btn-save {
        background: #0064d2;
        color: white;
    }
</style>