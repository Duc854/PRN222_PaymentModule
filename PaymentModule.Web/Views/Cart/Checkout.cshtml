@model PaymentModule.Business.Dtos.OutputDtos.UserCartOutputDto
@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="checkout-page">
    <div class="checkout-container">
        <div class="checkout-left">
            <h2 class="checkout-title">Checkout</h2>

            <!-- PAYMENT METHOD -->
            <div class="checkout-section">
                <h3>Pay with</h3>
                <div class="payment-options">
                    <label class="payment-option">
                        <input type="radio" name="payment" />
                        <img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/PayPal.svg" alt="PayPal" class="payment-logo" />
                        <span>PayPal</span>
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="payment" checked />
                        <img src="https://cdn-icons-png.flaticon.com/512/1041/1041873.png" alt="COD" class="payment-logo" />
                        <span>Thanh toán khi nhận hàng (COD)</span>
                    </label>
                </div>
            </div>

            <!-- SHIPPING ADDRESS -->
            <div class="checkout-section">
                <h3>Ship to</h3>
                <div id="shipToBox">
                    @if (ViewBag.AddressList != null && ViewBag.AddressList.Count > 0)
                    {
                        var addr = ViewBag.AddressList[0];
                        <div class="ship-address" id="addressDisplay">
                            <input type="hidden" id="shippingAddressId" value="@addr.Id" />
                            <p><strong>@addr.FullName</strong></p>
                            <p>@addr.Street</p>
                            <p>@addr.City, @addr.State</p>
                            <p>@addr.Country</p>
                            <p>@addr.Phone</p>
                            <button type="button" class="btn-edit-address" id="btnChangeAddress">Change</button>
                        </div>
                    }
                    else
                    {
                        <p class="no-address">⚠️ Bạn chưa có địa chỉ giao hàng</p>
                    }
                </div>
                <button type="button" class="btn-add-address" id="btnAddAddress">+ Add new address</button>
            </div>

            <!-- COUPON -->
            <div class="checkout-section">
                <h3>Mã giảm giá</h3>
                <select id="couponSelect" class="coupon-select">
                    <option value="">-- Chọn mã giảm giá --</option>
                    <option value="10">Giảm 10%</option>
                    <option value="20">Giảm 20%</option>
                </select>
                <button class="btn-apply-coupon" id="btnApplyCoupon">Áp dụng</button>
                <p id="couponMsg" class="coupon-msg"></p>
            </div>

            <!-- REVIEW ITEMS -->
            <div class="checkout-section">
                <h3>Review items</h3>
                @foreach (var item in Model.Items)
                {
                    <div class="checkout-item">
                        <img src="@item.Images" alt="@item.Title" class="checkout-item-img" />
                        <div class="checkout-item-info">
                            <p class="checkout-item-title">@item.Title</p>
                            <p>Qty: @item.Quantity × $@item.Price.ToString("0.00")</p>
                            <p><strong>$@item.TotalPrice.ToString("0.00")</strong></p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="checkout-right">
            <div class="order-summary">
                <h4>Order Summary</h4>
                <p>Items: <strong>@Model.Items.Count</strong></p>
                <p>Tiền hàng: <span id="subtotal" data-value="@Model.TotalPrice">@Model.TotalPrice.ToString("N0")</span> ₫</p>
                <p>Phí vận chuyển: <span id="shippingCost" data-value="0">Đang tính...</span></p>
                <p>Giảm giá: <span id="discountAmount" data-value="0">0 ₫</span></p>
                <hr />
                <p><strong>Tổng tiền: <span id="orderTotal" data-value="@Model.TotalPrice">@Model.TotalPrice.ToString("N0")</span> ₫</strong></p>
                <button type="button" class="btn-confirm-pay" id="btnConfirmPay" disabled>Confirm and pay</button>
            </div>
        </div>
    </div>
</section>

<!-- POPUP ADD ADDRESS -->
<div id="addressModal" class="modal-overlay">
    <div class="modal-box">
        <h3>Add new address</h3>
        <form id="addressForm">
            <label>Full Name</label><input type="text" name="fullName" required />
            <label>Street Address</label><input type="text" name="street" required />
            <label>City</label><input type="text" name="city" required />
            <label>State</label><input type="text" name="state" required />
            <label>Country</label><input type="text" name="country" required />
            <label>Phone</label><input type="text" name="phone" required />
            <div class="modal-actions">
                <button type="button" class="btn-cancel" id="closeModal">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
    // === KHAI BÁO BIẾN ===
    const modal = document.getElementById("addressModal");
    const btnAdd = document.getElementById("btnAddAddress");
    const closeBtn = document.getElementById("closeModal");
    const form = document.getElementById("addressForm");
    const shipToBox = document.getElementById("shipToBox");
    const confirmBtn = document.getElementById("btnConfirmPay");

    const subtotalEl = document.getElementById("subtotal");
    const shippingEl = document.getElementById("shippingCost");
    const discountEl = document.getElementById("discountAmount");
    const totalEl = document.getElementById("orderTotal");

    let hasAddress = document.querySelector("#addressDisplay") !== null;
    if (hasAddress) confirmBtn.disabled = false;

    // === HÀM HELPER ===
    function formatCurrency(num) {
        return parseFloat(num).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
    }

    // Hàm cập nhật tổng tiền
    function updateSummary() {
        const subtotal = parseFloat(subtotalEl.dataset.value) || 0;
        const shipping = parseFloat(shippingEl.dataset.value) || 0;
        const discount = parseFloat(discountEl.dataset.value) || 0;
        const total = subtotal + shipping - discount;

        shippingEl.textContent = formatCurrency(shipping);
        discountEl.textContent = formatCurrency(discount);
        totalEl.textContent = formatCurrency(total);
        confirmBtn.textContent = `Confirm and pay ${formatCurrency(total)}`;
    }

    // Hàm gọi API tính phí
    async function fetchShippingFee(city) {
        shippingEl.textContent = "Đang tính...";
        try {
            const response = await fetch(`/cart/api/calculate-shipping?city=${encodeURIComponent(city)}`);
            if (!response.ok) throw new Error("Failed to fetch");

            const data = await response.json();
            shippingEl.dataset.value = data.fee;
        } catch (error) {
            console.error("Lỗi tính phí ship:", error);
            shippingEl.dataset.value = 50000; // Phí mặc định nếu lỗi
        }
        updateSummary();
    }

    // === LOGIC THÊM ĐỊA CHỈ (Sửa đổi) ===
    form.addEventListener("submit", e => {
        e.preventDefault();
        const data = new FormData(form);
        const fullName = data.get("fullName");
        const street = data.get("street");
        const city = data.get("city"); // <-- Lấy City
        const state = data.get("state");
        const country = data.get("country");
        const phone = data.get("phone");

        // Cập nhật HTML (như cũ)
        shipToBox.innerHTML = `
            <div class="ship-address" id="addressDisplay">
                <input type="hidden" id="shippingAddressId" value="0" />
                <input type="hidden" id="shippingCity" value="${city}" />
                <p><strong>${fullName}</strong></p>
                <p>${street}</p>
                <p>${city}, ${state}</p>
                <p>${country}</p>
                <p>${phone}</p>
            </div>`;
        modal.classList.remove("show");
        hasAddress = true;
        confirmBtn.disabled = false;

        // GỌI API TÍNH PHÍ VỚI ĐỊA CHỈ MỚI
        fetchShippingFee(city);
    });

    // === LOGIC ÁP DỤNG COUPON (Sửa đổi) ===
    // ... (Code áp dụng coupon của bạn) ...
    // Trong hàm applyBtn.addEventListener("click", ...),
    // hãy đảm bảo bạn gọi updateSummary() sau khi tính discount.
    // Ví dụ:
    // discountEl.dataset.value = discount;
    // updateSummary();
    // ...

    // === LOGIC CONFIRM PAY (Sửa đổi) ===
    confirmBtn.addEventListener("click", () => {
        if (!hasAddress) {
            alert("⚠️ Bạn cần thêm địa chỉ giao hàng trước khi thanh toán!");
            return;
        }
        // Lấy dữ liệu từ các element
        const subtotal = parseFloat(subtotalEl.dataset.value);
        const shipping = parseFloat(shippingEl.dataset.value);
        const discount = parseFloat(discountEl.dataset.value);
        const total = subtotal + shipping - discount;
        const coupon = document.getElementById("couponSelect").value;

        const addrEl = document.querySelector("#addressDisplay");
        const addressId = parseInt(document.getElementById("shippingAddressId").value);
        const fullName = addrEl.querySelector("strong").innerText;
        const lines = addrEl.querySelectorAll("p");
        const street = lines[1].innerText;
        const cityLine = lines[2].innerText;
        const country = lines[3].innerText;
        const phone = lines[4].innerText;

        const paymentMethod = document.querySelector('input[name="payment"]:checked')
                                .closest(".payment-option").querySelector("span").innerText.toLowerCase().includes("paypal") 
                                ? "PayPal" : "COD";

        // Gửi JSON về server (với phí ship ĐỘNG)
        fetch("/order/ConfirmFromCheckout", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                subtotal,
                shipping, // <-- GỬI PHÍ SHIP ĐÚNG
                discount,
                total,
                coupon,
                paymentMethod,
                addressId: addressId, // Gửi ID
                address: { fullName, street, cityLine, country, phone }
            })
        }).then(() => window.location.href = "/order/confirm");
    });

    // === KHỞI CHẠY LẦN ĐẦU ===
    if (hasAddress) {
        // Lấy thành phố từ địa chỉ mặc định (do C# render)
        const defaultAddressP = document.querySelector("#addressDisplay p:nth-child(4)"); // Dòng "City, State"
        // Hoặc an toàn hơn, thêm một hidden input cho city
        @if (ViewBag.AddressList != null && ViewBag.AddressList.Count > 0)
        {
            // Thêm một input ẩn nữa trong div#addressDisplay
            var addr = ViewBag.AddressList[0];
            <text>
            if(document.getElementById("shippingCity") == null) {
                 let cityInput = document.createElement('input');
                 cityInput.type = 'hidden';
                 cityInput.id = 'shippingCity';
                 cityInput.value = @Html.Raw(Json.Serialize(addr.City));
                 document.getElementById('addressDisplay').prepend(cityInput);
            }
            </text>
        }

        const defaultCity = document.getElementById("shippingCity")?.value || "Tỉnh khác";
        fetchShippingFee(defaultCity);
    } else {
        fetchShippingFee("Tỉnh khác"); // Mặc định nếu không có địa chỉ
    }

    // (Code popup cũ của bạn)
    btnAdd?.addEventListener("click", () => modal.classList.add("show"));
    closeBtn?.addEventListener("click", () => modal.classList.remove("show"));
    window.addEventListener("click", e => { if (e.target === modal) modal.classList.remove("show"); });
});
</script>


<style>
    .checkout-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin: 40px auto;
        max-width: 1000px;
    }

    .checkout-left {
        flex: 2;
    }

    .checkout-right {
        flex: 1;
        background: #fafafa;
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #ddd;
    }

    .checkout-section {
        margin-bottom: 20px;
    }

    .checkout-item {
        display: flex;
        gap: 15px;
        border-bottom: 1px solid #eee;
        padding: 10px 0;
    }

    .checkout-item-img {
        width: 70px;
        height: 70px;
        border-radius: 10px;
        object-fit: cover;
    }

    .payment-logo {
        width: 30px;
        height: 30px;
        margin-right: 8px;
    }

    .btn-apply-coupon, .btn-confirm-pay {
        background: #0064d2;
        color: #fff;
        border: none;
        padding: 10px 18px;
        border-radius: 30px;
        cursor: pointer;
        font-weight: 600;
    }

        .btn-apply-coupon:hover, .btn-confirm-pay:hover {
            background: #0654ba;
        }

    .no-address {
        color: #c00;
        font-weight: 500;
    }

    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        justify-content: center;
        align-items: center;
    }

        .modal-overlay.show {
            display: flex;
        }

    .modal-box {
        background: white;
        padding: 20px;
        border-radius: 10px;
        width: 400px;
    }
</style>
